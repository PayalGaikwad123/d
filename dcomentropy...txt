function z = entropy(x)n = numel(x);
[u,~,x] = unique(x);
k = numel(u);
idx = 1:n;
Mx = sparse(idx,x,1,n,k,n);
Px = nonzeros(mean(Mx,1));
Hx = -dot(Px,log2(Px));
z = max(0,Hx);
end

function z = jointEntropy(x, y)
assert(numel(x) == numel(y));
n = numel(x);
x = reshape(x,1,n);
y = reshape(y,1,n);
l = min(min(x),min(y));
x = x-l+1;
y = y-l+1;
k = max(max(x),max(y));
idx = 1:n;
p = nonzeros(sparse(idx,x,1,n,k,n)'*sparse(idx,y,1,n,k,n)/n);   %joint distribution of x and y
z = -dot(p,log2(p));
z = max(0,z);
end

function z = condEntropy (x, y)
assert(numel(x) == numel(y));
n = numel(x);
x = reshape(x,1,n);
y = reshape(y,1,n);
l = min(min(x),min(y));
x = x-l+1;
y = y-l+1;
k = max(max(x),max(y));
idx = 1:n;
Mx = sparse(idx,x,1,n,k,n);
My = sparse(idx,y,1,n,k,n);
Pxy = nonzeros(Mx'*My/n);    %joint distribution of x and y
Hxy = -dot(Pxy,log2(Pxy));
Py = nonzeros(mean(My,1));
Hy = -dot(Py,log2(Py));
% conditional entropy H(x|y)
z = Hxy-Hy;
z = max(0,z);
end

function z = mutInfo(x, y)
assert(numel(x) == numel(y));
n = numel(x);
x = reshape(x,1,n);
y = reshape(y,1,n);
l = min(min(x),min(y));
x = x-l+1;
y = y-l+1;
k = max(max(x),max(y));
idx = 1:n;
Mx = sparse(idx,x,1,n,k,n);
My = sparse(idx,y,1,n,k,n);
Pxy = nonzeros(Mx'*My/n); %joint distribution of x and y
Hxy = -dot(Pxy,log2(Pxy));
Px = nonzeros(mean(Mx,1));
Py = nonzeros(mean(My,1));
% entropy of Py and Px
Hx = -dot(Px,log2(Px));
Hy = -dot(Py,log2(Py));
% mutual information
z = Hx+Hy-Hxy;
z = max(0,z);
end

k = 10;  % variable range
n = 100;  % number of variables
x = ceil(k*rand(1,n));
y = ceil(k*rand(1,n));
% x = randi(k,1,n);  % need statistics toolbox
% y = randi(k,1,n);
%% Entropy H(x), H(y)
Hx = entropy(x);
Hy = entropy(y);
%% Joint entropy H(x,y)
Hxy = jointEntropy(x,y);
%% Conditional entropy H(x|y)
Hx_y = condEntropy(x,y);
%% Mutual information I(x,y)
Ixy = mutInfo(x,y);

%% H(x|y) = H(x,y)-H(y)..
isequal(Hx_y,Hxy-Hy)      //CONDN 
%% I(x,y) = H(x)-H(x|y)
isequal(Ixy,Hx-Hx_y)  //MUTUAL INFO
%% I(x,y) = H(x)+H(y)-H(x,y)
isequal(Ixy,Hx+Hy-Hxy)     //MUTUal info

disp( ‘= = = = =’)
disp (Hxy)
disp(Hx_y)
disp(Ixy)